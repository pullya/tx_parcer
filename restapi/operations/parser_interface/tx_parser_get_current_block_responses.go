// Code generated by go-swagger; DO NOT EDIT.

package parser_interface

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/pullya/tx_parcer/models"
)

// TxParserGetCurrentBlockOKCode is the HTTP code returned for type TxParserGetCurrentBlockOK
const TxParserGetCurrentBlockOKCode int = 200

/*
TxParserGetCurrentBlockOK Successful response

swagger:response txParserGetCurrentBlockOK
*/
type TxParserGetCurrentBlockOK struct {

	/*
	  In: Body
	*/
	Payload *TxParserGetCurrentBlockOKBody `json:"body,omitempty"`
}

// NewTxParserGetCurrentBlockOK creates TxParserGetCurrentBlockOK with default headers values
func NewTxParserGetCurrentBlockOK() *TxParserGetCurrentBlockOK {

	return &TxParserGetCurrentBlockOK{}
}

// WithPayload adds the payload to the tx parser get current block o k response
func (o *TxParserGetCurrentBlockOK) WithPayload(payload *TxParserGetCurrentBlockOKBody) *TxParserGetCurrentBlockOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the tx parser get current block o k response
func (o *TxParserGetCurrentBlockOK) SetPayload(payload *TxParserGetCurrentBlockOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TxParserGetCurrentBlockOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
TxParserGetCurrentBlockDefault Unsuccessful response

swagger:response txParserGetCurrentBlockDefault
*/
type TxParserGetCurrentBlockDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewTxParserGetCurrentBlockDefault creates TxParserGetCurrentBlockDefault with default headers values
func NewTxParserGetCurrentBlockDefault(code int) *TxParserGetCurrentBlockDefault {
	if code <= 0 {
		code = 500
	}

	return &TxParserGetCurrentBlockDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the tx parser get current block default response
func (o *TxParserGetCurrentBlockDefault) WithStatusCode(code int) *TxParserGetCurrentBlockDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the tx parser get current block default response
func (o *TxParserGetCurrentBlockDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the tx parser get current block default response
func (o *TxParserGetCurrentBlockDefault) WithPayload(payload *models.ErrorResponse) *TxParserGetCurrentBlockDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the tx parser get current block default response
func (o *TxParserGetCurrentBlockDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TxParserGetCurrentBlockDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
